{"ast":null,"code":"import _objectSpread from\"D:/Coding Archive/Git Repo/PrivateProject/prj05/client/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"D:/Coding Archive/Git Repo/PrivateProject/prj05/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useCallback,useContext,useRef,useState}from'react';import axios from'axios';import{myContext}from'../App';import TodoListAdd from'../components/todoListAdd';import TodoListBox from'../components/todoListBox';import TodoListDate from'../components/todoListDate';import Pagination from'../components/pagination';import TodoListAddDB from'../components/todoListAdd(DB)';import TodoListBoxDB from'../components/todoListBox(DB)';import'../style/Todolist.css';import'../style/GlobalStyle.css';import TodoListDateDB from'../components/todoListDate(DB)';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Todolist=function Todolist(){var _todosDB$datas;// contextAPI를 사용.\nvar contextApi=useContext(myContext);// Todolist는 DB버전와 No DB버전으로 나누어 구현할 것임.\n// No DB버전은 리액트만 사용하여 구현하는 Todolist.\n// DB버전은 MariaDB를 사용하여 구현하는 Todolist임.\n// DB버전 TodoList 로직.\n// DB버전 TodoList 로직.\n// 두 버전화면을 전환하는데 사용할 변수를 제어.\nvar _useState=useState(\"DB\"),_useState2=_slicedToArray(_useState,2),componentValue=_useState2[0],setComponentValue=_useState2[1];// 회원 아이디를 제어하는 변수\nvar _useState3=useState(\"NoDB\"),_useState4=_slicedToArray(_useState3,2),memberId=_useState4[0],setMemberId=_useState4[1];// Todolist 정보를 담는 변수.\nvar _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),todosDB=_useState6[0],setTodosDB=_useState6[1];// Todolist 정보를 담는 변수.\nvar _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),todosDBCount=_useState8[0],setTodosDBCount=_useState8[1];// 로딩 제어 변수.\nvar _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),loading=_useState10[0],setLoading=_useState10[1];// 화면 전환을 제어하는 onClick 함수들.\nvar toDBVersion=function toDBVersion(){setComponentValue(\"DB\");};var toNoDBVersion=function toNoDBVersion(){setComponentValue(\"NoDB\");};React.useEffect(function(){// 로그인 검증 실시.\ncontextApi.loginCheck();if(!contextApi.loginStatus){// console.log(\"회원정보 검증이 실패하였습니다.\");\n}// 검증에 통과하였을 경우 contextApi를 이용하여 setMemberId.\nsetMemberId(contextApi.whoIsLogin);// Todolist 데이터를 조회.\naxios.post('/prj05/todo/showtodo',{'memberId':memberId}).then(function(res){axios.post('/prj05/todo/getpostcount',{'memberId':memberId}).then(function(res){setTodosDBCount(res.data.datas[0].TODO_COUNT);});setTodosDB(res.data);setLoading(true);}).catch(function(res){console.log(res.data.SystemMassage);});},[contextApi,memberId]);// No DB버전 TodoList 로직.\n// No DB버전 TodoList 로직.\nvar _useState11=useState([{id:1,text:'11',checked:false,important:false},{id:2,text:'22',checked:false,important:false},{id:3,text:'33',checked:false,important:false}]),_useState12=_slicedToArray(_useState11,2),todos=_useState12[0],setTodos=_useState12[1];var nextId=useRef(14);var onAdd=useCallback(function(text){var todo={id:nextId.current,text:text,checked:false};if(text.length>36){alert(\"입력 가능한 최대 글자수는 35자입니다.\");}else{setTodos(todos.concat(todo));nextId.current++;}},[todos]);var onCheck=useCallback(function(id){setTodos(todos.map(function(todo){return todo.id===id?_objectSpread(_objectSpread({},todo),{},{checked:!todo.checked}):todo;}));},[todos]);var onRemove=useCallback(function(id){setTodos(todos.filter(function(todo){return todo.id!==id;}));// 클릭되지 않은 나머지만 추출하여 새로운 배열 생성\n},[todos]);var onImportant=useCallback(function(id){setTodos(todos.map(function(todo){return todo.id===id?_objectSpread(_objectSpread({},todo),{},{important:!todo.important}):todo;}));},[todos]);// 페이지네이션 로직\n// 페이지네이션 로직\n// 현재 페이지를 제어할 변수 (가장 처음으로 보여질 페이지)\nvar _useState13=useState(1),_useState14=_slicedToArray(_useState13,2),currentPage=_useState14[0],setCurrentPage=_useState14[1];// 페이지 당 요소 갯수를 제어할 변수\nvar _useState15=useState(5),_useState16=_slicedToArray(_useState15,1),postPerPage=_useState16[0];// Get current posts\nvar indexOfLastPost=currentPage*postPerPage;var indexOfFirstPost=indexOfLastPost-postPerPage;var currentPosts=todos.slice(indexOfFirstPost,indexOfLastPost);var currentDBPosts=(_todosDB$datas=todosDB.datas)===null||_todosDB$datas===void 0?void 0:_todosDB$datas.slice(indexOfFirstPost,indexOfLastPost);// Change page\nvar paginate=function paginate(pageNumber){return setCurrentPage(pageNumber);};return/*#__PURE__*/_jsx(_Fragment,{children:componentValue===\"NoDB\"?/*#__PURE__*/_jsx(\"div\",{className:\"tdl-pagebackground setcenter\",children:/*#__PURE__*/_jsx(\"div\",{className:\"tdl-pageinner setcenter\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tdl-tdlarea setcenter gifont\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tdl-sidebar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"tdl-sidetitle\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"TodoList(No DB)\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"tdl-sideutil\",children:/*#__PURE__*/_jsx(TodoListDate,{todos:todos})}),/*#__PURE__*/_jsx(\"div\",{className:\"tdl-sidebtu\",children:/*#__PURE__*/_jsx(\"button\",{className:\"tdl-changebtu gifont\",onClick:toDBVersion,children:\"DB \\uBC84\\uC804\\uC73C\\uB85C \\uC804\\uD658\"})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"tdl-contents\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"tdl-addtdl\",children:/*#__PURE__*/_jsx(TodoListAdd,{onAdd:onAdd})}),/*#__PURE__*/_jsx(\"div\",{className:\"tdl-showtdl\",children:/*#__PURE__*/_jsx(TodoListBox,{todos:currentPosts,onRemove:onRemove,onCheck:onCheck,onImportant:onImportant})}),/*#__PURE__*/_jsx(\"div\",{className:\"tdl-pagenation\",children:/*#__PURE__*/_jsx(Pagination,{postsPerPage:postPerPage,totalPosts:todos.length,paginate:paginate})})]})]})})}):/*#__PURE__*/_jsx(\"div\",{className:\"tdl-pagebackground setcenter\",children:/*#__PURE__*/_jsx(\"div\",{className:\"tdl-pageinner setcenter\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tdl-tdlarea setcenter gifont\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"tdl-sidebar\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"tdl-sidetitle\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"TodoList(DB)\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"tdl-sideutil\",children:/*#__PURE__*/_jsx(TodoListDateDB,{todos:todosDB})}),/*#__PURE__*/_jsx(\"div\",{className:\"tdl-sidebtu\",children:/*#__PURE__*/_jsx(\"button\",{className:\"tdl-changebtu gifont\",onClick:toNoDBVersion,children:\"No DB \\uBC84\\uC804\\uC73C\\uB85C \\uC804\\uD658\"})})]}),/*#__PURE__*/_jsx(\"div\",{className:\"tdl-contents\",children:contextApi.loginStatus?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"tdl-addtdl\",children:/*#__PURE__*/_jsx(TodoListAddDB,{memberId:memberId})}),/*#__PURE__*/_jsx(\"div\",{className:\"tdl-showtdl\",children:!loading?/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"todolist-loadbox\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"Loading...\"})})}):/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(TodoListBoxDB,{todosDB:currentDBPosts})})}),/*#__PURE__*/_jsx(\"div\",{className:\"tdl-pagenation\",children:/*#__PURE__*/_jsx(Pagination,{postsPerPage:postPerPage,totalPosts:todosDBCount,paginate:paginate})})]}):/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"tdl-showtdl\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"\\uBCF8 \\uAE30\\uB2A5\\uC740 \\uD68C\\uC6D0\\uC804\\uC6A9 \\uAE30\\uB2A5\\uC785\\uB2C8\\uB2E4.\"})})})})]})})})});};export default Todolist;","map":{"version":3,"names":["React","useCallback","useContext","useRef","useState","axios","myContext","TodoListAdd","TodoListBox","TodoListDate","Pagination","TodoListAddDB","TodoListBoxDB","TodoListDateDB","Todolist","contextApi","componentValue","setComponentValue","memberId","setMemberId","todosDB","setTodosDB","todosDBCount","setTodosDBCount","loading","setLoading","toDBVersion","toNoDBVersion","useEffect","loginCheck","loginStatus","whoIsLogin","post","then","res","data","datas","TODO_COUNT","catch","console","log","SystemMassage","id","text","checked","important","todos","setTodos","nextId","onAdd","todo","current","length","alert","concat","onCheck","map","onRemove","filter","onImportant","currentPage","setCurrentPage","postPerPage","indexOfLastPost","indexOfFirstPost","currentPosts","slice","currentDBPosts","paginate","pageNumber"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj05/client/src/pages/todolist.js"],"sourcesContent":["import React, { useCallback, useContext, useRef, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { myContext } from '../App';\r\n\r\nimport TodoListAdd from '../components/todoListAdd';\r\nimport TodoListBox from '../components/todoListBox';\r\nimport TodoListDate from '../components/todoListDate';\r\nimport Pagination from '../components/pagination';\r\nimport TodoListAddDB from '../components/todoListAdd(DB)';\r\nimport TodoListBoxDB from '../components/todoListBox(DB)';\r\n\r\nimport '../style/Todolist.css';\r\nimport '../style/GlobalStyle.css';\r\nimport TodoListDateDB from '../components/todoListDate(DB)';\r\n\r\nconst Todolist = () => {\r\n    // contextAPI를 사용.\r\n    const contextApi = useContext(myContext);\r\n\r\n    // Todolist는 DB버전와 No DB버전으로 나누어 구현할 것임.\r\n    // No DB버전은 리액트만 사용하여 구현하는 Todolist.\r\n    // DB버전은 MariaDB를 사용하여 구현하는 Todolist임.\r\n\r\n    // DB버전 TodoList 로직.\r\n    // DB버전 TodoList 로직.\r\n\r\n    // 두 버전화면을 전환하는데 사용할 변수를 제어.\r\n    const [componentValue, setComponentValue] = useState(\"DB\");\r\n\r\n    // 회원 아이디를 제어하는 변수\r\n    const [memberId, setMemberId] = useState(\"NoDB\");\r\n\r\n    // Todolist 정보를 담는 변수.\r\n    const [todosDB, setTodosDB] = useState([]);\r\n    // Todolist 정보를 담는 변수.\r\n    const [todosDBCount, setTodosDBCount] = useState([]);\r\n\r\n    // 로딩 제어 변수.\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    // 화면 전환을 제어하는 onClick 함수들.\r\n    const toDBVersion = () => {\r\n        setComponentValue(\"DB\");\r\n    }\r\n    const toNoDBVersion = () => {\r\n        setComponentValue(\"NoDB\");\r\n    } \r\n\r\n    React.useEffect(() => {\r\n        // 로그인 검증 실시.\r\n        contextApi.loginCheck();\r\n\r\n        if(!contextApi.loginStatus) {\r\n            // console.log(\"회원정보 검증이 실패하였습니다.\");\r\n        }\r\n        // 검증에 통과하였을 경우 contextApi를 이용하여 setMemberId.\r\n        setMemberId(contextApi.whoIsLogin);\r\n\r\n        // Todolist 데이터를 조회.\r\n        axios.post('/prj05/todo/showtodo', {\r\n            'memberId': memberId\r\n        })\r\n        .then((res) => {\r\n            axios.post('/prj05/todo/getpostcount', {\r\n                'memberId': memberId\r\n            })\r\n            .then((res) => {\r\n                setTodosDBCount(res.data.datas[0].TODO_COUNT);\r\n            })\r\n\r\n            setTodosDB(res.data);   \r\n            setLoading(true);\r\n        })\r\n        .catch((res) => {\r\n            console.log(res.data.SystemMassage);\r\n        });\r\n    }, [contextApi, memberId])\r\n\r\n    // No DB버전 TodoList 로직.\r\n    // No DB버전 TodoList 로직.\r\n    const [todos, setTodos] = useState([\r\n        {\r\n            id: 1,\r\n            text: '11',\r\n            checked: false,\r\n            important: false,\r\n        },\r\n        {\r\n            id: 2,\r\n            text: '22',\r\n            checked: false,\r\n            important: false,\r\n        },\r\n        {\r\n            id: 3,\r\n            text: '33',\r\n            checked: false,\r\n            important: false,\r\n        },\r\n    ]);\r\n\r\n    const nextId = useRef(14);\r\n    \r\n    const onAdd = useCallback(text => {\r\n        const todo = {\r\n            id: nextId.current,\r\n            text,\r\n            checked: false,\r\n        };\r\n\r\n        if(text.length > 36) {\r\n            alert(\"입력 가능한 최대 글자수는 35자입니다.\");\r\n        }\r\n        else {\r\n            setTodos(todos.concat(todo));\r\n            nextId.current++;\r\n        }\r\n        }, [todos]);\r\n\r\n    const onCheck = useCallback(\r\n        id => {setTodos(todos.map(todo => \r\n            todo.id === id \r\n            ? \r\n                { ...todo, checked: !todo.checked } \r\n            : \r\n                todo\r\n            )\r\n        );\r\n        }, [todos]);\r\n    \r\n    const onRemove = useCallback(\r\n        id => {\r\n        setTodos(todos.filter(todo => todo.id !== id)); // 클릭되지 않은 나머지만 추출하여 새로운 배열 생성\r\n        }, [todos]);\r\n    \r\n    const onImportant = useCallback(\r\n        id => {\r\n        setTodos(\r\n            todos.map(todo =>\r\n            todo.id === id ? { ...todo, important: !todo.important } : todo)\r\n        );\r\n    }, [todos]);\r\n\r\n\r\n    // 페이지네이션 로직\r\n    // 페이지네이션 로직\r\n\r\n    // 현재 페이지를 제어할 변수 (가장 처음으로 보여질 페이지)\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    // 페이지 당 요소 갯수를 제어할 변수\r\n    const [postPerPage] = useState(5);\r\n\r\n    // Get current posts\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage;\r\n    const currentPosts = todos.slice(indexOfFirstPost, indexOfLastPost);\r\n    const currentDBPosts = todosDB.datas?.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n    // Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    return (\r\n        <>\r\n            {componentValue === \"NoDB\" ?\r\n                <div className='tdl-pagebackground setcenter'>\r\n                    <div className='tdl-pageinner setcenter'>\r\n                        <div className='tdl-tdlarea setcenter gifont'>\r\n\r\n                            <div className='tdl-sidebar'>\r\n\r\n                                <div className='tdl-sidetitle'>\r\n                                    <h1>TodoList(No DB)</h1>\r\n                                </div>\r\n\r\n                                <div className='tdl-sideutil'>\r\n                                    <TodoListDate todos={todos}/>\r\n                                </div>\r\n\r\n                                <div className='tdl-sidebtu'>\r\n                                    <button className='tdl-changebtu gifont' onClick={toDBVersion}>DB 버전으로 전환</button>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <div className='tdl-contents'>\r\n                                <div className='tdl-addtdl'>\r\n                                    <TodoListAdd onAdd={onAdd}/>\r\n                                </div>\r\n                                <div className='tdl-showtdl'>\r\n                                    <TodoListBox\r\n                                            todos={currentPosts} \r\n                                            onRemove={onRemove} \r\n                                            onCheck={onCheck} \r\n                                            onImportant={onImportant} \r\n                                        />\r\n                                </div>\r\n                                <div className='tdl-pagenation'>\r\n                                    <Pagination\r\n                                        postsPerPage={postPerPage}\r\n                                        totalPosts={todos.length}\r\n                                        paginate={paginate}\r\n                                    />\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            :\r\n                <div className='tdl-pagebackground setcenter'>\r\n                    <div className='tdl-pageinner setcenter'>\r\n                        <div className='tdl-tdlarea setcenter gifont'>\r\n\r\n                            <div className='tdl-sidebar'>\r\n\r\n                                <div className='tdl-sidetitle'>\r\n                                    <h1>TodoList(DB)</h1>\r\n                                </div>\r\n\r\n                                <div className='tdl-sideutil'>\r\n                                    <TodoListDateDB todos={todosDB}/>\r\n                                </div>\r\n\r\n                                <div className='tdl-sidebtu'>\r\n                                    <button className='tdl-changebtu gifont' onClick={toNoDBVersion}>No DB 버전으로 전환</button>\r\n                                </div>\r\n\r\n                            </div>\r\n\r\n                            <div className='tdl-contents'>\r\n                                {contextApi.loginStatus ? \r\n                                    <>\r\n                                        <div className='tdl-addtdl'>\r\n                                            <TodoListAddDB memberId={memberId}/>\r\n                                        </div>\r\n                                        <div className='tdl-showtdl'>\r\n                                            {!loading ?\r\n                                                <>\r\n                                                    <div className='todolist-loadbox'>\r\n                                                        <h1>Loading...</h1>\r\n                                                    </div>\r\n                                                </>\r\n                                            :\r\n                                                <>\r\n                                                    <TodoListBoxDB todosDB={currentDBPosts}/>\r\n                                                </>\r\n                                            }\r\n\r\n                                        </div>\r\n                                        <div className='tdl-pagenation'>\r\n                                            <Pagination\r\n                                                postsPerPage={postPerPage}\r\n                                                totalPosts={todosDBCount}\r\n                                                paginate={paginate}\r\n                                            />\r\n                                        </div>\r\n                                    </>\r\n                                    :\r\n                                    <>\r\n                                        <div className='tdl-showtdl'>\r\n                                            <h1>본 기능은 회원전용 기능입니다.</h1>\r\n                                        </div>\r\n                                    </>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todolist;"],"mappings":"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"},"metadata":{},"sourceType":"module"}