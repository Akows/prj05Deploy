{"ast":null,"code":"import _slicedToArray from\"D:/Coding Archive/Git Repo/PrivateProject/prj05/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{createContext,useCallback,useState}from'react';import{BrowserRouter,Routes,Route}from'react-router-dom';import axios from'axios';import Uppermenu from'./components/uppermenu';import Main from'./pages/main';import Callapi from'./pages/callapi';import Todolist from'./pages/todolist';import Board from'./pages/board';import BoardViewandMod from'./pages/boardviewandmod';import Login from'./pages/login';import Join from'./pages/join';import MemberInfo from'./components/memberinfo';import Test from'./pages/test';import'./App.css';// 전역 상태 관리를 위한 ContextAPI 사용을 위해 createContext()을 사용, 빈 Context를 생성.\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";export var myContext=/*#__PURE__*/createContext('defaultvalue');function App(){// 로그인 페이지에서 로그인을 완료하면 로그인 페이지는 로그인 값을 받아 App 페이지로 이동.\n// App 페이지는 로그인 값이 필요한 페이지 혹은 컴포넌트로 값을 전달해준다.\n// 따라서 로그인 값을 제어할 변수를 useState로 선언하여 제어한다.\n// 로그인 상태를 제어하는 loginStatus.\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),loginStatus=_useState2[0],setLoginStatus=_useState2[1];// 로그인한 유저의 아이디 값을 제어하는 whoIsLogin.\nvar _useState3=useState('비로그인사용자'),_useState4=_slicedToArray(_useState3,2),whoIsLogin=_useState4[0],setwhoIsLogin=_useState4[1];// Cookie에 저장된 JWT를 검증하는 함수를 useCallback으로 저장.\n// ContextAPI로 모든 컴포넌트들에게 전달.\nvar loginCheck=useCallback(function(){axios.get('/prj05/member/validation').then(function(res){console.log(\"JWT 검증이 정상적으로 통과되었습니다.\");setLoginStatus(true);setwhoIsLogin(res.data.memberid);}).catch(function(){console.log(\"JWT 검증에 이상 발생함.\");setLoginStatus(false);setwhoIsLogin('비로그인사용자');});},[]);return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(myContext.Provider,{value:{whoIsLogin:whoIsLogin,loginStatus:loginStatus,setwhoIsLogin:setwhoIsLogin,setLoginStatus:setLoginStatus,loginCheck:loginCheck},children:/*#__PURE__*/_jsxs(BrowserRouter,{children:[/*#__PURE__*/_jsx(Uppermenu,{}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsx(Main,{})}),/*#__PURE__*/_jsx(Route,{path:\"/api\",element:/*#__PURE__*/_jsx(Callapi,{})}),/*#__PURE__*/_jsx(Route,{path:\"/todolist\",element:/*#__PURE__*/_jsx(Todolist,{})}),/*#__PURE__*/_jsx(Route,{path:\"/board\",element:/*#__PURE__*/_jsx(Board,{})}),/*#__PURE__*/_jsx(Route,{path:\"/boardview/:BOARD_NUMBER\",element:/*#__PURE__*/_jsx(BoardViewandMod,{})}),/*#__PURE__*/_jsx(Route,{path:\"/login\",element:/*#__PURE__*/_jsx(Login,{})}),/*#__PURE__*/_jsx(Route,{path:\"/join\",element:/*#__PURE__*/_jsx(Join,{})}),/*#__PURE__*/_jsx(Route,{path:\"/info\",element:/*#__PURE__*/_jsx(MemberInfo,{})}),/*#__PURE__*/_jsx(Route,{path:\"/test\",element:/*#__PURE__*/_jsx(Test,{})})]})]})})});}export default App;","map":{"version":3,"names":["React","createContext","useCallback","useState","BrowserRouter","Routes","Route","axios","Uppermenu","Main","Callapi","Todolist","Board","BoardViewandMod","Login","Join","MemberInfo","Test","myContext","App","loginStatus","setLoginStatus","whoIsLogin","setwhoIsLogin","loginCheck","get","then","res","console","log","data","memberid","catch"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj05/client/src/App.js"],"sourcesContent":["import React, { createContext, useCallback, useState } from 'react';\r\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport Uppermenu from './components/uppermenu';\r\nimport Main from './pages/main';\r\nimport Callapi from './pages/callapi';\r\nimport Todolist from './pages/todolist';\r\nimport Board from './pages/board';\r\nimport BoardViewandMod from './pages/boardviewandmod';\r\nimport Login from './pages/login';\r\nimport Join from './pages/join';\r\nimport MemberInfo from './components/memberinfo';\r\n\r\nimport Test from './pages/test';\r\n\r\nimport './App.css';\r\n\r\n// 전역 상태 관리를 위한 ContextAPI 사용을 위해 createContext()을 사용, 빈 Context를 생성.\r\nexport const myContext = createContext('defaultvalue');\r\n\r\nfunction App() {\r\n  // 로그인 페이지에서 로그인을 완료하면 로그인 페이지는 로그인 값을 받아 App 페이지로 이동.\r\n  // App 페이지는 로그인 값이 필요한 페이지 혹은 컴포넌트로 값을 전달해준다.\r\n  // 따라서 로그인 값을 제어할 변수를 useState로 선언하여 제어한다.\r\n\r\n  // 로그인 상태를 제어하는 loginStatus.\r\n  const [loginStatus, setLoginStatus] = useState(false);\r\n  // 로그인한 유저의 아이디 값을 제어하는 whoIsLogin.\r\n  const [whoIsLogin, setwhoIsLogin] = useState('비로그인사용자');\r\n\r\n  // Cookie에 저장된 JWT를 검증하는 함수를 useCallback으로 저장.\r\n  // ContextAPI로 모든 컴포넌트들에게 전달.\r\n  const loginCheck = useCallback(() => {\r\n    axios\r\n    .get('/prj05/member/validation')\r\n    .then((res) => {\r\n      console.log(\"JWT 검증이 정상적으로 통과되었습니다.\");\r\n      setLoginStatus(true);\r\n      setwhoIsLogin(res.data.memberid);\r\n    })\r\n    .catch(() => {\r\n      console.log(\"JWT 검증에 이상 발생함.\");\r\n      setLoginStatus(false);\r\n      setwhoIsLogin('비로그인사용자');\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <> \r\n      <myContext.Provider value={{ whoIsLogin, loginStatus, setwhoIsLogin, setLoginStatus, loginCheck }}>\r\n        <BrowserRouter>\r\n          <Uppermenu/>\r\n          <Routes>\r\n            <Route path='/' element={<Main/>}/>\r\n            <Route path='/api' element={<Callapi/>}/>\r\n            <Route path='/todolist' element={<Todolist/>}/>\r\n            <Route path='/board' element={<Board/>}/>\r\n            <Route path='/boardview/:BOARD_NUMBER' element={<BoardViewandMod/>}/>\r\n            <Route path='/login' element={<Login/>}/>\r\n            <Route path='/join' element={<Join/>}/>\r\n            <Route path='/info' element={<MemberInfo/>}/>\r\n\r\n            <Route path='/test' element={<Test/>}/>\r\n          </Routes>\r\n        </BrowserRouter>\r\n      </myContext.Provider>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"4IAAA,MAAOA,MAAP,EAAgBC,aAAhB,CAA+BC,WAA/B,CAA4CC,QAA5C,KAA4D,OAA5D,CACA,OAASC,aAAT,CAAwBC,MAAxB,CAAgCC,KAAhC,KAA6C,kBAA7C,CACA,MAAOC,MAAP,KAAkB,OAAlB,CAEA,MAAOC,UAAP,KAAsB,wBAAtB,CACA,MAAOC,KAAP,KAAiB,cAAjB,CACA,MAAOC,QAAP,KAAoB,iBAApB,CACA,MAAOC,SAAP,KAAqB,kBAArB,CACA,MAAOC,MAAP,KAAkB,eAAlB,CACA,MAAOC,gBAAP,KAA4B,yBAA5B,CACA,MAAOC,MAAP,KAAkB,eAAlB,CACA,MAAOC,KAAP,KAAiB,cAAjB,CACA,MAAOC,WAAP,KAAuB,yBAAvB,CAEA,MAAOC,KAAP,KAAiB,cAAjB,CAEA,MAAO,WAAP,CAEA;6IACA,MAAO,IAAMC,UAAS,cAAGjB,aAAa,CAAC,cAAD,CAA/B,CAEP,QAASkB,IAAT,EAAe,CACb;AACA;AACA;AAEA;AACA,cAAsChB,QAAQ,CAAC,KAAD,CAA9C,wCAAOiB,WAAP,eAAoBC,cAApB,eACA;AACA,eAAoClB,QAAQ,CAAC,SAAD,CAA5C,yCAAOmB,UAAP,eAAmBC,aAAnB,eAEA;AACA;AACA,GAAMC,WAAU,CAAGtB,WAAW,CAAC,UAAM,CACnCK,KAAK,CACJkB,GADD,CACK,0BADL,EAECC,IAFD,CAEM,SAACC,GAAD,CAAS,CACbC,OAAO,CAACC,GAAR,CAAY,wBAAZ,EACAR,cAAc,CAAC,IAAD,CAAd,CACAE,aAAa,CAACI,GAAG,CAACG,IAAJ,CAASC,QAAV,CAAb,CACD,CAND,EAOCC,KAPD,CAOO,UAAM,CACXJ,OAAO,CAACC,GAAR,CAAY,iBAAZ,EACAR,cAAc,CAAC,KAAD,CAAd,CACAE,aAAa,CAAC,SAAD,CAAb,CACD,CAXD,EAYD,CAb6B,CAa3B,EAb2B,CAA9B,CAeA,mBACE,sCACE,KAAC,SAAD,CAAW,QAAX,EAAoB,KAAK,CAAE,CAAED,UAAU,CAAVA,UAAF,CAAcF,WAAW,CAAXA,WAAd,CAA2BG,aAAa,CAAbA,aAA3B,CAA0CF,cAAc,CAAdA,cAA1C,CAA0DG,UAAU,CAAVA,UAA1D,CAA3B,uBACE,MAAC,aAAD,yBACE,KAAC,SAAD,IADF,cAEE,MAAC,MAAD,yBACE,KAAC,KAAD,EAAO,IAAI,CAAC,GAAZ,CAAgB,OAAO,cAAE,KAAC,IAAD,IAAzB,EADF,cAEE,KAAC,KAAD,EAAO,IAAI,CAAC,MAAZ,CAAmB,OAAO,cAAE,KAAC,OAAD,IAA5B,EAFF,cAGE,KAAC,KAAD,EAAO,IAAI,CAAC,WAAZ,CAAwB,OAAO,cAAE,KAAC,QAAD,IAAjC,EAHF,cAIE,KAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,CAAqB,OAAO,cAAE,KAAC,KAAD,IAA9B,EAJF,cAKE,KAAC,KAAD,EAAO,IAAI,CAAC,0BAAZ,CAAuC,OAAO,cAAE,KAAC,eAAD,IAAhD,EALF,cAME,KAAC,KAAD,EAAO,IAAI,CAAC,QAAZ,CAAqB,OAAO,cAAE,KAAC,KAAD,IAA9B,EANF,cAOE,KAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,OAAO,cAAE,KAAC,IAAD,IAA7B,EAPF,cAQE,KAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,OAAO,cAAE,KAAC,UAAD,IAA7B,EARF,cAUE,KAAC,KAAD,EAAO,IAAI,CAAC,OAAZ,CAAoB,OAAO,cAAE,KAAC,IAAD,IAA7B,EAVF,GAFF,GADF,EADF,EADF,CAqBD,CAED,cAAeL,IAAf"},"metadata":{},"sourceType":"module"}