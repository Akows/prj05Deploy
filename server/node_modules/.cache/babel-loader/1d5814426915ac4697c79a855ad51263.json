{"ast":null,"code":"import _slicedToArray from\"D:/Coding Archive/Git Repo/PrivateProject/prj05/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useState}from'react';import axios from'axios';import'../style/Login.css';import'../style/GlobalStyle.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var Login=function Login(){// 로그인에 필요한 데이터를 변수로 제어할 useState 사용.\nvar _useState=useState(''),_useState2=_slicedToArray(_useState,2),inputID=_useState2[0],setInputID=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),inputPW=_useState4[0],setInputPW=_useState4[1];// // 로그인 Event.\n// const loginEvent = () => {\n//     // 정보 입력란이 하나라도 비어있으면 경고를 출력하고 기능 정지.\n//     if (inputID === '' || inputPW === '') {\n//         alert('아이디 혹은 비밀번호가 입력되지 않았습니다.');\n//     }\n//     // 그렇지 않으면 다음 작업으로 이동.\n//     else {\n//         axios.post('/prj05/member/login', null, {\n//             params: {\n//                 'MEMBER_ID': inputID,\n//                 'MEMBER_PW': inputPW\n//             }\n//         })\n//         // 작업이 완료되었을 경우, 로그인 값과 사용자 이름을 상단 App으로 전송.\n//         .then(res => {\n//             // 인증이 실패한 경우\n//             if (!res.data.auth) {\n//                 props.sendLoginStatus(false);\n//                 alert(res.data.SystemMessage);\n//             }\n//             // 인증이 성공한 경우\n//             else {\n//                 // 토큰을 로컬스토리지에 저장.\n//                 localStorage.setItem('token', res.data.token);\n//                 // 토큰 유효성 검사 실행\n//                 axios.get('/prj05/member/auth', {\n//                     headers: {\n//                         \"x-access-token\": localStorage.getItem('token'),\n//                     }})\n//                     // 유효성 검사를 통과했을 경우\n//                     // 로그인 상태를 true로 변경하고 App으로 전송.\n//                     .then(() => {\n//                         props.sendLoginID(inputID);\n//                         props.sendLoginStatus(true);\n//                         // 작업 완료 되면 페이지 이동(새로고침).\n//                         document.location.href = '/'\n//                     })\n//                     // 에러가 발생했을 경우.\n//                     .catch(res => {\n//                         console.log(res);\n//                     })\n//             }\n//         })\n//         // 에러가 발생했을 경우.\n//         .catch(res => {\n//             alert(res.data.SystemMessage);\n//             props.sendLoginStatus(false);\n//         })\n//     }\n// }\n// 로그인 Event.\nvar loginEvent=function loginEvent(){// 정보 입력란이 하나라도 비어있으면 경고를 출력하고 기능 정지.\nif(inputID===''||inputPW===''){alert('아이디 혹은 비밀번호가 입력되지 않았습니다.');}// 그렇지 않으면 다음 작업으로 이동.\nelse{axios.post('/prj05/member/login',{'memberid':inputID,'memberpw':inputPW}).then(function(res){alert(res.data.SystemMassage);document.location.href='/';}).catch(function(res){alert(res.data.SystemMassage);document.location.href='/';});}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"login-pagebackground setcenter\",children:/*#__PURE__*/_jsx(\"div\",{className:\"login-pageinner setcenter\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"login-formarea gifont\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"login-title setcenter\",children:/*#__PURE__*/_jsx(\"h1\",{children:\"\\uC0AC\\uC6A9\\uC790 \\uB85C\\uADF8\\uC778\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"login-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",className:\"login-inputtag gifont\",value:inputID,placeholder:\"\\uC544\\uC774\\uB514\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",onChange:function onChange(e){setInputID(e.target.value);}}),/*#__PURE__*/_jsx(\"input\",{type:\"password\",className:\"login-inputtag gifont\",value:inputPW,placeholder:\"\\uBE44\\uBC00\\uBC88\\uD638\\uB97C \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694\",onChange:function onChange(e){setInputPW(e.target.value);},autoComplete:\"off\"}),/*#__PURE__*/_jsx(\"div\",{className:\"login-button\",children:/*#__PURE__*/_jsx(\"button\",{className:\"login-buttontag gifont\",onClick:loginEvent,children:\"\\uB85C\\uADF8\\uC778\\uD558\\uAE30\"})})]})]})})})});};export default Login;","map":{"version":3,"names":["useState","axios","Login","inputID","setInputID","inputPW","setInputPW","loginEvent","alert","post","then","res","data","SystemMassage","document","location","href","catch","e","target","value"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj05/client/src/pages/login.js"],"sourcesContent":["import { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport '../style/Login.css';\r\nimport '../style/GlobalStyle.css';\r\n\r\nconst Login = () => {\r\n\r\n    // 로그인에 필요한 데이터를 변수로 제어할 useState 사용.\r\n    const [inputID, setInputID] = useState('');\r\n    const [inputPW, setInputPW] = useState('');\r\n\r\n    // // 로그인 Event.\r\n    // const loginEvent = () => {\r\n    //     // 정보 입력란이 하나라도 비어있으면 경고를 출력하고 기능 정지.\r\n    //     if (inputID === '' || inputPW === '') {\r\n    //         alert('아이디 혹은 비밀번호가 입력되지 않았습니다.');\r\n    //     }\r\n    //     // 그렇지 않으면 다음 작업으로 이동.\r\n    //     else {\r\n    //         axios.post('/prj05/member/login', null, {\r\n    //             params: {\r\n    //                 'MEMBER_ID': inputID,\r\n    //                 'MEMBER_PW': inputPW\r\n    //             }\r\n    //         })\r\n    //         // 작업이 완료되었을 경우, 로그인 값과 사용자 이름을 상단 App으로 전송.\r\n    //         .then(res => {\r\n    //             // 인증이 실패한 경우\r\n    //             if (!res.data.auth) {\r\n    //                 props.sendLoginStatus(false);\r\n    //                 alert(res.data.SystemMessage);\r\n    //             }\r\n    //             // 인증이 성공한 경우\r\n    //             else {\r\n    //                 // 토큰을 로컬스토리지에 저장.\r\n    //                 localStorage.setItem('token', res.data.token);\r\n\r\n    //                 // 토큰 유효성 검사 실행\r\n    //                 axios.get('/prj05/member/auth', {\r\n    //                     headers: {\r\n    //                         \"x-access-token\": localStorage.getItem('token'),\r\n    //                     }})\r\n    //                     // 유효성 검사를 통과했을 경우\r\n    //                     // 로그인 상태를 true로 변경하고 App으로 전송.\r\n    //                     .then(() => {\r\n    //                         props.sendLoginID(inputID);\r\n    //                         props.sendLoginStatus(true);\r\n\r\n    //                         // 작업 완료 되면 페이지 이동(새로고침).\r\n    //                         document.location.href = '/'\r\n    //                     })\r\n    //                     // 에러가 발생했을 경우.\r\n    //                     .catch(res => {\r\n    //                         console.log(res);\r\n    //                     })\r\n    //             }\r\n    //         })\r\n    //         // 에러가 발생했을 경우.\r\n    //         .catch(res => {\r\n    //             alert(res.data.SystemMessage);\r\n    //             props.sendLoginStatus(false);\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // 로그인 Event.\r\n    const loginEvent = () => {\r\n        // 정보 입력란이 하나라도 비어있으면 경고를 출력하고 기능 정지.\r\n        if (inputID === '' || inputPW === '') {\r\n            alert('아이디 혹은 비밀번호가 입력되지 않았습니다.');\r\n        }\r\n        // 그렇지 않으면 다음 작업으로 이동.\r\n        else {\r\n            axios.post('/prj05/member/login', {\r\n                'memberid': inputID,\r\n                'memberpw': inputPW\r\n            })\r\n            .then(res => {\r\n                alert(res.data.SystemMassage);\r\n                document.location.href = '/';\r\n            })\r\n            .catch(res => {\r\n                alert(res.data.SystemMassage);            \r\n                document.location.href = '/';\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='login-pagebackground setcenter'>\r\n                <div className='login-pageinner setcenter'>\r\n                    <div className='login-formarea gifont'>\r\n                        <div className='login-title setcenter'>\r\n                            <h1>사용자 로그인</h1>\r\n                        </div>\r\n                        <div className='login-input'>\r\n                            <input type='text' className='login-inputtag gifont' value={inputID} placeholder='아이디를 입력해주세요' onChange={(e) => {setInputID(e.target.value)}}/>\r\n                            <input type='password' className='login-inputtag gifont' value={inputPW} placeholder='비밀번호를 입력해주세요' onChange={(e) => {setInputPW(e.target.value)}} autoComplete='off'/>\r\n                            <div className='login-button'>\r\n                                <button className='login-buttontag gifont' onClick={loginEvent}>로그인하기</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Login;"],"mappings":"4IAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,MAAOC,MAAP,KAAkB,OAAlB,CAEA,MAAO,oBAAP,CACA,MAAO,0BAAP,C,6IAEA,GAAMC,MAAK,CAAG,QAARA,MAAQ,EAAM,CAEhB;AACA,cAA8BF,QAAQ,CAAC,EAAD,CAAtC,wCAAOG,OAAP,eAAgBC,UAAhB,eACA,eAA8BJ,QAAQ,CAAC,EAAD,CAAtC,yCAAOK,OAAP,eAAgBC,UAAhB,eAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,GAAMC,WAAU,CAAG,QAAbA,WAAa,EAAM,CACrB;AACA,GAAIJ,OAAO,GAAK,EAAZ,EAAkBE,OAAO,GAAK,EAAlC,CAAsC,CAClCG,KAAK,CAAC,0BAAD,CAAL,CACH,CACD;AAHA,IAIK,CACDP,KAAK,CAACQ,IAAN,CAAW,qBAAX,CAAkC,CAC9B,WAAYN,OADkB,CAE9B,WAAYE,OAFkB,CAAlC,EAICK,IAJD,CAIM,SAAAC,GAAG,CAAI,CACTH,KAAK,CAACG,GAAG,CAACC,IAAJ,CAASC,aAAV,CAAL,CACAC,QAAQ,CAACC,QAAT,CAAkBC,IAAlB,CAAyB,GAAzB,CACH,CAPD,EAQCC,KARD,CAQO,SAAAN,GAAG,CAAI,CACVH,KAAK,CAACG,GAAG,CAACC,IAAJ,CAASC,aAAV,CAAL,CACAC,QAAQ,CAACC,QAAT,CAAkBC,IAAlB,CAAyB,GAAzB,CACH,CAXD,EAYH,CACJ,CApBD,CAsBA,mBACI,sCACI,YAAK,SAAS,CAAC,gCAAf,uBACI,YAAK,SAAS,CAAC,2BAAf,uBACI,aAAK,SAAS,CAAC,uBAAf,wBACI,YAAK,SAAS,CAAC,uBAAf,uBACI,6DADJ,EADJ,cAII,aAAK,SAAS,CAAC,aAAf,wBACI,cAAO,IAAI,CAAC,MAAZ,CAAmB,SAAS,CAAC,uBAA7B,CAAqD,KAAK,CAAEb,OAA5D,CAAqE,WAAW,CAAC,+DAAjF,CAA+F,QAAQ,CAAE,kBAACe,CAAD,CAAO,CAACd,UAAU,CAACc,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV,CAA2B,CAA5I,EADJ,cAEI,cAAO,IAAI,CAAC,UAAZ,CAAuB,SAAS,CAAC,uBAAjC,CAAyD,KAAK,CAAEf,OAAhE,CAAyE,WAAW,CAAC,qEAArF,CAAoG,QAAQ,CAAE,kBAACa,CAAD,CAAO,CAACZ,UAAU,CAACY,CAAC,CAACC,MAAF,CAASC,KAAV,CAAV,CAA2B,CAAjJ,CAAmJ,YAAY,CAAC,KAAhK,EAFJ,cAGI,YAAK,SAAS,CAAC,cAAf,uBACI,eAAQ,SAAS,CAAC,wBAAlB,CAA2C,OAAO,CAAEb,UAApD,4CADJ,EAHJ,GAJJ,GADJ,EADJ,EADJ,EADJ,CAoBH,CAvGD,CAyGA,cAAeL,MAAf"},"metadata":{},"sourceType":"module"}