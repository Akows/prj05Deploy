{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding Archive\\\\Git Repo\\\\PrivateProject\\\\prj05\\\\client\\\\src\\\\pages\\\\contextProvider.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from \"react\"; // 전역 상태 관리를 위한 ContextAPI 사용을 위해 createContext()을 사용.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ContextApi = /*#__PURE__*/createContext();\n\nconst ContextProvider = props => {\n  _s();\n\n  // 로그인 여부 값과 로그인 한 사용자 이름을 관리하기 위한 isLogin / whoLogin 변수를 useState로 관리.\n  const [isLogin, setIsLogin] = useState(false);\n  const [whoLogin, setWhoLogin] = useState('익명사용자');\n  useEffect(() => {\n    // sessionStorage에 Item으로 담겨진 로그인값을 검증.\n    // 로그인 값의 이름은 'MEMBER_ID', 이 값이 없을(null) 경우 아무 일도 일어나지 않는다.\n    if (sessionStorage.getItem('MEMBER_ID') === null) {} else {\n      // 이 값이 있을 경우 useState로 제어하는 isLogin의 값을 true로 전환한다.\n      // 하위 컴포넌트에서 로그인 값을 필요로 할 경우, 여기서 전달해주면 된다.\n      setIsLogin(true);\n      setWhoLogin(sessionStorage.getItem('MEMBER_ID'));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ContextApi.Provider, {\n    value: {\n      isLogin,\n      setIsLogin,\n      whoLogin,\n      setWhoLogin\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ContextProvider, \"9JUhCOiJqpEI7/F/0MujqCV/xX4=\");\n\n_c = ContextProvider;\nexport default ContextProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useEffect","useState","ContextApi","ContextProvider","props","isLogin","setIsLogin","whoLogin","setWhoLogin","sessionStorage","getItem","children"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj05/client/src/pages/contextProvider.js"],"sourcesContent":["import { createContext, useEffect, useState } from \"react\";\r\n\r\n// 전역 상태 관리를 위한 ContextAPI 사용을 위해 createContext()을 사용.\r\nexport const ContextApi = createContext();\r\n\r\nconst ContextProvider = (props) => {\r\n\r\n    // 로그인 여부 값과 로그인 한 사용자 이름을 관리하기 위한 isLogin / whoLogin 변수를 useState로 관리.\r\n    const [isLogin, setIsLogin] = useState(false);\r\n    const [whoLogin, setWhoLogin] = useState('익명사용자');\r\n\r\n    useEffect(() => {\r\n        // sessionStorage에 Item으로 담겨진 로그인값을 검증.\r\n        // 로그인 값의 이름은 'MEMBER_ID', 이 값이 없을(null) 경우 아무 일도 일어나지 않는다.\r\n        if (sessionStorage.getItem('MEMBER_ID') === null) {\r\n            \r\n        } \r\n        else {\r\n        // 이 값이 있을 경우 useState로 제어하는 isLogin의 값을 true로 전환한다.\r\n        // 하위 컴포넌트에서 로그인 값을 필요로 할 경우, 여기서 전달해주면 된다.\r\n            setIsLogin(true);\r\n            setWhoLogin(sessionStorage.getItem('MEMBER_ID'));\r\n        }\r\n    }, [])\r\n\r\n\treturn (\r\n        <ContextApi.Provider value={{ \r\n            isLogin, \r\n            setIsLogin, \r\n            whoLogin, \r\n            setWhoLogin }}\r\n        >\r\n            {props.children}\r\n        </ContextApi.Provider>\r\n    )\r\n}\r\n\r\nexport default ContextProvider;"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD,C,CAEA;;;AACA,OAAO,MAAMC,UAAU,gBAAGH,aAAa,EAAhC;;AAEP,MAAMI,eAAe,GAAIC,KAAD,IAAW;EAAA;;EAE/B;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,KAAD,CAAtC;EACA,MAAM,CAACM,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,OAAD,CAAxC;EAEAD,SAAS,CAAC,MAAM;IACZ;IACA;IACA,IAAIS,cAAc,CAACC,OAAf,CAAuB,WAAvB,MAAwC,IAA5C,EAAkD,CAEjD,CAFD,MAGK;MACL;MACA;MACIJ,UAAU,CAAC,IAAD,CAAV;MACAE,WAAW,CAACC,cAAc,CAACC,OAAf,CAAuB,WAAvB,CAAD,CAAX;IACH;EACJ,CAZQ,EAYN,EAZM,CAAT;EAcH,oBACO,QAAC,UAAD,CAAY,QAAZ;IAAqB,KAAK,EAAE;MACxBL,OADwB;MAExBC,UAFwB;MAGxBC,QAHwB;MAIxBC;IAJwB,CAA5B;IAAA,UAMKJ,KAAK,CAACO;EANX;IAAA;IAAA;IAAA;EAAA,QADP;AAUA,CA9BD;;GAAMR,e;;KAAAA,e;AAgCN,eAAeA,eAAf"},"metadata":{},"sourceType":"module"}