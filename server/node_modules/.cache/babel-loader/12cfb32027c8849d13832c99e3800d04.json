{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding Archive\\\\Git Repo\\\\PrivateProject\\\\prj05\\\\client\\\\src\\\\pages\\\\todolist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useRef, useState } from 'react';\nimport TodoListAdd from '../components/todoListAdd';\nimport TodoListBox from '../components/todoListBox';\nimport TodoListDate from '../components/todoListDate';\nimport Pagination from '../components/pagination';\nimport '../style/Todolist.css';\nimport '../style/GlobalStyle.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Todolist = () => {\n  _s();\n\n  // Todolist는 DB버전와 No DB버전으로 나누어 구현할 것임.\n  // No DB버전은 리액트만 사용하여 구현하는 Todolist.\n  // DB버전은 MariaDB를 사용하여 구현하는 Todolist임.\n  // 두 버전화면을 전환하는데 사용할 변수를 제어.\n  const [componentValue, setComponentValue] = useState('NoDB');\n  const [todos, setTodos] = useState([{\n    id: 1,\n    text: '11',\n    checked: false,\n    important: false\n  }, {\n    id: 2,\n    text: '22',\n    checked: false,\n    important: false\n  }, {\n    id: 3,\n    text: '33',\n    checked: false,\n    important: false\n  }]); // 페이지네이션\n  // 현재 페이지를 제어할 변수 (가장 처음으로 보여질 페이지)\n\n  const [currentPage, setCurrentPage] = useState(1); // 페이지 당 요소 갯수를 제어할 변수\n\n  const [postPerPage] = useState(5); // Get current posts\n\n  const indexOfLastPost = currentPage * postPerPage;\n  const indexOfFirstPost = indexOfLastPost - postPerPage;\n  const currentPosts = todos.slice(indexOfFirstPost, indexOfLastPost); // Change page\n\n  const paginate = pageNumber => setCurrentPage(pageNumber);\n\n  const nextId = useRef(14);\n  const onAdd = useCallback(text => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false\n    };\n\n    if (text.length > 36) {\n      alert(\"입력 가능한 최대 글자수는 35자입니다.\");\n    } else {\n      setTodos(todos.concat(todo));\n      nextId.current++;\n    }\n  }, [todos]);\n  const onCheck = useCallback(id => {\n    setTodos(todos.map(todo => todo.id === id ? { ...todo,\n      checked: !todo.checked\n    } : todo));\n  }, [todos]);\n  const onRemove = useCallback(id => {\n    setTodos(todos.filter(todo => todo.id !== id)); // 클릭되지 않은 나머지만 추출하여 새로운 배열 생성\n  }, [todos]);\n  const onImportant = useCallback(id => {\n    setTodos(todos.map(todo => todo.id === id ? { ...todo,\n      important: !todo.important\n    } : todo));\n  }, [todos]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tdl-pagebackground setcenter\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tdl-pageinner setcenter\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tdl-tdlarea setcenter gifont\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tdl-sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tdl-sidetitle\",\n              children: /*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"TodoList(No DB)\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tdl-sideutil\",\n              children: /*#__PURE__*/_jsxDEV(TodoListDate, {\n                todos: todos\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 110,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tdl-sidebtu\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"tdl-changebtu gifont\",\n                children: \"DB \\uBC84\\uC804\\uC73C\\uB85C \\uC804\\uD658\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tdl-contents\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tdl-addtdl\",\n              children: /*#__PURE__*/_jsxDEV(TodoListAdd, {\n                onAdd: onAdd\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tdl-showtdl\",\n              children: /*#__PURE__*/_jsxDEV(TodoListBox, {\n                todos: currentPosts,\n                onRemove: onRemove,\n                onCheck: onCheck,\n                onImportant: onImportant\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 125,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tdl-pagenation\",\n              children: /*#__PURE__*/_jsxDEV(Pagination, {\n                postsPerPage: postPerPage,\n                totalPosts: todos.length,\n                paginate: paginate\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 133,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this)\n  }, void 0, false);\n};\n\n_s(Todolist, \"gZ+VUuoM9glOh0yrF44tss4ugr8=\");\n\n_c = Todolist;\nexport default Todolist;\n\nvar _c;\n\n$RefreshReg$(_c, \"Todolist\");","map":{"version":3,"names":["React","useCallback","useRef","useState","TodoListAdd","TodoListBox","TodoListDate","Pagination","Todolist","componentValue","setComponentValue","todos","setTodos","id","text","checked","important","currentPage","setCurrentPage","postPerPage","indexOfLastPost","indexOfFirstPost","currentPosts","slice","paginate","pageNumber","nextId","onAdd","todo","current","length","alert","concat","onCheck","map","onRemove","filter","onImportant"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj05/client/src/pages/todolist.js"],"sourcesContent":["import React, { useCallback, useRef, useState } from 'react';\r\n\r\nimport TodoListAdd from '../components/todoListAdd';\r\nimport TodoListBox from '../components/todoListBox';\r\nimport TodoListDate from '../components/todoListDate';\r\nimport Pagination from '../components/pagination';\r\n\r\nimport '../style/Todolist.css';\r\nimport '../style/GlobalStyle.css';\r\n\r\nconst Todolist = () => {\r\n\r\n    // Todolist는 DB버전와 No DB버전으로 나누어 구현할 것임.\r\n    // No DB버전은 리액트만 사용하여 구현하는 Todolist.\r\n    // DB버전은 MariaDB를 사용하여 구현하는 Todolist임.\r\n\r\n    // 두 버전화면을 전환하는데 사용할 변수를 제어.\r\n    const [componentValue, setComponentValue] = useState('NoDB');\r\n\r\n    const [todos, setTodos] = useState([\r\n        {\r\n            id: 1,\r\n            text: '11',\r\n            checked: false,\r\n            important: false,\r\n        },\r\n        {\r\n            id: 2,\r\n            text: '22',\r\n            checked: false,\r\n            important: false,\r\n        },\r\n        {\r\n            id: 3,\r\n            text: '33',\r\n            checked: false,\r\n            important: false,\r\n        },\r\n    ]);\r\n\r\n    // 페이지네이션\r\n    // 현재 페이지를 제어할 변수 (가장 처음으로 보여질 페이지)\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    // 페이지 당 요소 갯수를 제어할 변수\r\n    const [postPerPage] = useState(5);\r\n\r\n    // Get current posts\r\n    const indexOfLastPost = currentPage * postPerPage;\r\n    const indexOfFirstPost = indexOfLastPost - postPerPage;\r\n    const currentPosts = todos.slice(indexOfFirstPost, indexOfLastPost);\r\n\r\n    // Change page\r\n    const paginate = pageNumber => setCurrentPage(pageNumber);\r\n\r\n    const nextId = useRef(14);\r\n    \r\n    const onAdd = useCallback(text => {\r\n        const todo = {\r\n            id: nextId.current,\r\n            text,\r\n            checked: false,\r\n        };\r\n\r\n        if(text.length > 36) {\r\n            alert(\"입력 가능한 최대 글자수는 35자입니다.\");\r\n        }\r\n        else {\r\n            setTodos(todos.concat(todo));\r\n            nextId.current++;\r\n        }\r\n        }, [todos]);\r\n\r\n    const onCheck = useCallback(\r\n        id => {setTodos(todos.map(todo => \r\n            todo.id === id \r\n            ? \r\n                { ...todo, checked: !todo.checked } \r\n            : \r\n                todo\r\n            )\r\n        );\r\n        }, [todos]);\r\n    \r\n    const onRemove = useCallback(\r\n        id => {\r\n        setTodos(todos.filter(todo => todo.id !== id)); // 클릭되지 않은 나머지만 추출하여 새로운 배열 생성\r\n        }, [todos]);\r\n    \r\n    const onImportant = useCallback(\r\n        id => {\r\n        setTodos(\r\n            todos.map(todo =>\r\n            todo.id === id ? { ...todo, important: !todo.important } : todo)\r\n        );\r\n    }, [todos]);\r\n\r\n    return (\r\n        <>\r\n            <div className='tdl-pagebackground setcenter'>\r\n                <div className='tdl-pageinner setcenter'>\r\n                    <div className='tdl-tdlarea setcenter gifont'>\r\n\r\n                        <div className='tdl-sidebar'>\r\n\r\n                            <div className='tdl-sidetitle'>\r\n                                <h1>TodoList(No DB)</h1>\r\n                            </div>\r\n\r\n                            <div className='tdl-sideutil'>\r\n                                <TodoListDate todos={todos}/>\r\n                            </div>\r\n\r\n                            <div className='tdl-sidebtu'>\r\n                                <button className='tdl-changebtu gifont'>DB 버전으로 전환</button>\r\n                            </div>\r\n\r\n                        </div>\r\n\r\n                        <div className='tdl-contents'>\r\n\r\n                            <div className='tdl-addtdl'>\r\n                                <TodoListAdd onAdd={onAdd}/>\r\n                            </div>\r\n                            <div className='tdl-showtdl'>\r\n                                <TodoListBox\r\n                                        todos={currentPosts} \r\n                                        onRemove={onRemove} \r\n                                        onCheck={onCheck} \r\n                                        onImportant={onImportant} \r\n                                    />\r\n                            </div>\r\n                            <div className='tdl-pagenation'>\r\n                                <Pagination\r\n                                    postsPerPage={postPerPage}\r\n                                    totalPosts={todos.length}\r\n                                    paginate={paginate}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Todolist;"],"mappings":"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"},"metadata":{},"sourceType":"module"}