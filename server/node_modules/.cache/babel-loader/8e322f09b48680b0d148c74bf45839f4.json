{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding Archive\\\\Git Repo\\\\PrivateProject\\\\prj05\\\\client\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { CookiesProvider } from 'react-cookie'; // 전역 상태 관리를 위한 ContextAPI 사용을 위해 createContext()을 사용, 빈 Context를 생성.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const myContext = createContext('defaultvalue'); // 로그인 페이지에서 로그인을 완료하면 로그인 페이지는 로그인 값을 받아 App 페이지로 이동.\n// App 페이지는 로그인 값이 필요한 페이지 혹은 컴포넌트로 값을 전달해준다.\n// 따라서 로그인 값을 제어할 변수를 useState로 선언하여 제어한다.\n// 로그인 상태를 제어하는 loginStatus.\n\nconst [loginStatus, setLoginStatus] = useState(false); // 로그인한 유저의 아이디 값을 제어하는 whoIsLogin.\n\nconst [whoIsLogin, setwhoIsLogin] = useState('비로그인사용자'); // Cookie에 저장된 JWT를 검증하는 함수를 useCallback으로 저장.\n// ContextAPI로 모든 컴포넌트들에게 전달.\n\nconst loginCheck = useCallback(() => {\n  axios.get('/prj05/member/validation').then(res => {\n    setLoginStatus(true);\n    setwhoIsLogin(res.data.memberid);\n  }).catch(() => {\n    setLoginStatus(false);\n    setwhoIsLogin('비로그인사용자');\n  });\n}, []);\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render( /*#__PURE__*/_jsxDEV(React.StrictMode, {\n  children: /*#__PURE__*/_jsxDEV(myContext.Provider, {\n    value: {\n      whoIsLogin,\n      loginStatus,\n      setwhoIsLogin,\n      setLoginStatus,\n      loginCheck\n    },\n    children: /*#__PURE__*/_jsxDEV(CookiesProvider, {\n      children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this)\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 39,\n  columnNumber: 3\n}, this)); // If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\nreportWebVitals();","map":{"version":3,"names":["React","ReactDOM","App","reportWebVitals","CookiesProvider","myContext","createContext","loginStatus","setLoginStatus","useState","whoIsLogin","setwhoIsLogin","loginCheck","useCallback","axios","get","then","res","data","memberid","catch","root","createRoot","document","getElementById","render"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj05/client/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { CookiesProvider } from 'react-cookie';\n\n// 전역 상태 관리를 위한 ContextAPI 사용을 위해 createContext()을 사용, 빈 Context를 생성.\nexport const myContext = createContext('defaultvalue');\n\n  // 로그인 페이지에서 로그인을 완료하면 로그인 페이지는 로그인 값을 받아 App 페이지로 이동.\n  // App 페이지는 로그인 값이 필요한 페이지 혹은 컴포넌트로 값을 전달해준다.\n  // 따라서 로그인 값을 제어할 변수를 useState로 선언하여 제어한다.\n\n  // 로그인 상태를 제어하는 loginStatus.\n  const [loginStatus, setLoginStatus] = useState(false);\n  // 로그인한 유저의 아이디 값을 제어하는 whoIsLogin.\n  const [whoIsLogin, setwhoIsLogin] = useState('비로그인사용자');\n\n  // Cookie에 저장된 JWT를 검증하는 함수를 useCallback으로 저장.\n  // ContextAPI로 모든 컴포넌트들에게 전달.\n  const loginCheck = useCallback(() => {\n    axios\n    .get('/prj05/member/validation')\n    .then((res) => {\n      setLoginStatus(true);\n      setwhoIsLogin(res.data.memberid);\n    })\n    .catch(() => {\n      setLoginStatus(false);\n      setwhoIsLogin('비로그인사용자');\n    });\n  }, []);\n\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <myContext.Provider value={{ whoIsLogin, loginStatus, setwhoIsLogin, setLoginStatus, loginCheck }}>\n      <CookiesProvider>\n        <App />\n      </CookiesProvider>\n    </myContext.Provider>\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,OAAO,aAAP;AACA,OAAOC,GAAP,MAAgB,OAAhB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;AAEA,SAASC,eAAT,QAAgC,cAAhC,C,CAEA;;;AACA,OAAO,MAAMC,SAAS,GAAGC,aAAa,CAAC,cAAD,CAA/B,C,CAEL;AACA;AACA;AAEA;;AACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCC,QAAQ,CAAC,KAAD,CAA9C,C,CACA;;AACA,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BF,QAAQ,CAAC,SAAD,CAA5C,C,CAEA;AACA;;AACA,MAAMG,UAAU,GAAGC,WAAW,CAAC,MAAM;EACnCC,KAAK,CACJC,GADD,CACK,0BADL,EAECC,IAFD,CAEOC,GAAD,IAAS;IACbT,cAAc,CAAC,IAAD,CAAd;IACAG,aAAa,CAACM,GAAG,CAACC,IAAJ,CAASC,QAAV,CAAb;EACD,CALD,EAMCC,KAND,CAMO,MAAM;IACXZ,cAAc,CAAC,KAAD,CAAd;IACAG,aAAa,CAAC,SAAD,CAAb;EACD,CATD;AAUD,CAX6B,EAW3B,EAX2B,CAA9B;AAcF,MAAMU,IAAI,GAAGpB,QAAQ,CAACqB,UAAT,CAAoBC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAApB,CAAb;AACAH,IAAI,CAACI,MAAL,eACE,QAAC,KAAD,CAAO,UAAP;EAAA,uBACE,QAAC,SAAD,CAAW,QAAX;IAAoB,KAAK,EAAE;MAAEf,UAAF;MAAcH,WAAd;MAA2BI,aAA3B;MAA0CH,cAA1C;MAA0DI;IAA1D,CAA3B;IAAA,uBACE,QAAC,eAAD;MAAA,uBACE,QAAC,GAAD;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA;AADF;EAAA;EAAA;EAAA;AAAA,QADF,E,CAUA;AACA;AACA;;AACAT,eAAe"},"metadata":{},"sourceType":"module"}