{"ast":null,"code":"import _slicedToArray from\"D:/Coding Archive/Git Repo/PrivateProject/prj05/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useCallback,useContext,useState}from'react';import axios from'axios';import{myContext}from'../App';import'../style/TodoListAdd.css';import'../style/GlobalStyle.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";var TodoListAddDB=function TodoListAddDB(props){// contextAPI를 사용.\nvar contextApi=useContext(myContext);// 입력한 값을 제어하는 변수.\nvar _useState=useState(\"\"),_useState2=_slicedToArray(_useState,2),inputText=_useState2[0],setinputText=_useState2[1];var onChange=useCallback(function(e){setinputText(e.target.value);},[]);var addTodolist=function addTodolist(){if(!contextApi.loginStatus){alert(\"DB Todolist는 회원전용기능입니다.\");document.location.href='/todolist';}// 로그인 검증 실시.\ncontextApi.loginCheck();if(!contextApi.loginStatus){console.log(\"회원정보 검증이 실패하였습니다.\");}else{axios.post('/prj05/todo/todoinsert',{'memberId':props.memberId,'insertText':inputText}).then(function(res){console.log(res.data.SystemMassage);document.location.href='/todolist';}).catch(function(res){console.log(res.data.SystemMassage);});}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"tdl-addform gifont\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"tdl-form\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"tdl-addinput gifont\",placeholder:\"\\uCD94\\uAC00\\uD560 \\uD560 \\uC77C\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694\",defaultValue:inputText,onChange:onChange,maxLength:35}),/*#__PURE__*/_jsx(\"button\",{className:\"tdl-addbtu gifont\",onClick:addTodolist,children:/*#__PURE__*/_jsx(\"h2\",{children:\"\\uCD94\\uAC00\"})})]})})});};export default TodoListAddDB;","map":{"version":3,"names":["React","useCallback","useContext","useState","axios","myContext","TodoListAddDB","props","contextApi","inputText","setinputText","onChange","e","target","value","addTodolist","loginStatus","alert","document","location","href","loginCheck","console","log","post","memberId","then","res","data","SystemMassage","catch"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj05/client/src/components/todoListAdd(DB).js"],"sourcesContent":["import React, { useCallback, useContext, useState } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { myContext } from '../App';\r\n\r\nimport '../style/TodoListAdd.css';\r\nimport '../style/GlobalStyle.css';\r\n\r\nconst TodoListAddDB = ( props ) => {\r\n    // contextAPI를 사용.\r\n    const contextApi = useContext(myContext);\r\n\r\n    // 입력한 값을 제어하는 변수.\r\n    const [inputText, setinputText] = useState(\"\");\r\n\r\n    const onChange = useCallback(e => {\r\n        setinputText(e.target.value);\r\n    }, []);\r\n\r\n    const addTodolist = () => {\r\n        if(!contextApi.loginStatus) {\r\n            alert(\"DB Todolist는 회원전용기능입니다.\");\r\n            document.location.href = '/todolist';\r\n        }\r\n\r\n        // 로그인 검증 실시.\r\n        contextApi.loginCheck();\r\n\r\n        if(!contextApi.loginStatus) {\r\n            console.log(\"회원정보 검증이 실패하였습니다.\");\r\n        }\r\n        else {\r\n            axios.post('/prj05/todo/todoinsert', {\r\n                'memberId': props.memberId,\r\n                'insertText': inputText\r\n            })\r\n            .then(res => {\r\n                console.log(res.data.SystemMassage);\r\n                document.location.href = '/todolist';\r\n            })\r\n            .catch(res => {\r\n                console.log(res.data.SystemMassage);\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className='tdl-addform gifont'>\r\n                <div className=\"tdl-form\">\r\n                    <input className=\"tdl-addinput gifont\" placeholder=\"추가할 할 일을 입력하세요\" defaultValue={inputText} onChange={onChange} maxLength={35}/>\r\n                    <button className=\"tdl-addbtu gifont\" onClick={addTodolist}>\r\n                        <h2>추가</h2>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoListAddDB;"],"mappings":"4IAAA,MAAOA,MAAP,EAAgBC,WAAhB,CAA6BC,UAA7B,CAAyCC,QAAzC,KAAyD,OAAzD,CACA,MAAOC,MAAP,KAAkB,OAAlB,CAEA,OAASC,SAAT,KAA0B,QAA1B,CAEA,MAAO,0BAAP,CACA,MAAO,0BAAP,C,6IAEA,GAAMC,cAAa,CAAG,QAAhBA,cAAgB,CAAEC,KAAF,CAAa,CAC/B;AACA,GAAMC,WAAU,CAAGN,UAAU,CAACG,SAAD,CAA7B,CAEA;AACA,cAAkCF,QAAQ,CAAC,EAAD,CAA1C,wCAAOM,SAAP,eAAkBC,YAAlB,eAEA,GAAMC,SAAQ,CAAGV,WAAW,CAAC,SAAAW,CAAC,CAAI,CAC9BF,YAAY,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAZ,CACH,CAF2B,CAEzB,EAFyB,CAA5B,CAIA,GAAMC,YAAW,CAAG,QAAdA,YAAc,EAAM,CACtB,GAAG,CAACP,UAAU,CAACQ,WAAf,CAA4B,CACxBC,KAAK,CAAC,yBAAD,CAAL,CACAC,QAAQ,CAACC,QAAT,CAAkBC,IAAlB,CAAyB,WAAzB,CACH,CAED;AACAZ,UAAU,CAACa,UAAX,GAEA,GAAG,CAACb,UAAU,CAACQ,WAAf,CAA4B,CACxBM,OAAO,CAACC,GAAR,CAAY,mBAAZ,EACH,CAFD,IAGK,CACDnB,KAAK,CAACoB,IAAN,CAAW,wBAAX,CAAqC,CACjC,WAAYjB,KAAK,CAACkB,QADe,CAEjC,aAAchB,SAFmB,CAArC,EAICiB,IAJD,CAIM,SAAAC,GAAG,CAAI,CACTL,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACC,IAAJ,CAASC,aAArB,EACAX,QAAQ,CAACC,QAAT,CAAkBC,IAAlB,CAAyB,WAAzB,CACH,CAPD,EAQCU,KARD,CAQO,SAAAH,GAAG,CAAI,CACVL,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACC,IAAJ,CAASC,aAArB,EACH,CAVD,EAWH,CACJ,CAzBD,CA2BA,mBACI,sCACI,YAAK,SAAS,CAAC,oBAAf,uBACI,aAAK,SAAS,CAAC,UAAf,wBACI,cAAO,SAAS,CAAC,qBAAjB,CAAuC,WAAW,CAAC,uEAAnD,CAAoE,YAAY,CAAEpB,SAAlF,CAA6F,QAAQ,CAAEE,QAAvG,CAAiH,SAAS,CAAE,EAA5H,EADJ,cAEI,eAAQ,SAAS,CAAC,mBAAlB,CAAsC,OAAO,CAAEI,WAA/C,uBACI,oCADJ,EAFJ,GADJ,EADJ,EADJ,CAYH,CAlDD,CAoDA,cAAeT,cAAf"},"metadata":{},"sourceType":"module"}