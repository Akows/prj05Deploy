{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding Archive\\\\Git Repo\\\\PrivateProject\\\\prj05\\\\client\\\\src\\\\pages\\\\stateManager.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\"; // 전역 상태 관리를 위한 ContextAPI 사용을 위해 createContext()을 사용, 빈 Context를 생성.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const LoginContext = /*#__PURE__*/createContext({\n  isLogin: '',\n  whoLogin: ''\n});\n\nconst StateManager = props => {\n  _s();\n\n  // 로그인 여부 값과 로그인 한 사용자 이름을 관리하기 위한 isLogin / whoLogin 변수를 useState로 관리.\n  const [isLogin, setIsLogin] = useState('');\n  const [whoLogin, setWhoLogin] = useState('');\n  useEffect(() => {\n    // 웹이 실행되면 가장 먼저 isLogin을 flase로 초기화.\n    setIsLogin(false); // sessionStorage에 Item으로 담겨진 로그인값을 검증.\n    // 로그인 값의 이름은 'MEMBER_ID', 이 값이 없을(null) 경우 whoLogin의 값을 '익명사용자'로 set.\n\n    if (sessionStorage.getItem('MEMBER_ID') === null) {\n      setWhoLogin('익명사용자');\n    } else {\n      // 이 값이 있을 경우 useState로 제어하는 isLogin의 값을 true로 전환하고 whoLogin을 로그인 한 유저의 ID값으로 변경한다.\n      setIsLogin(true);\n      setWhoLogin(sessionStorage.getItem('MEMBER_ID'));\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(LoginContext.Provider, {\n    value: {\n      isLogin,\n      setIsLogin,\n      whoLogin,\n      setWhoLogin\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(StateManager, \"rS3LvNy+xcKtSYs3/s8BGowbqiI=\");\n\n_c = StateManager;\nexport default StateManager;\n\nvar _c;\n\n$RefreshReg$(_c, \"StateManager\");","map":{"version":3,"names":["React","createContext","useEffect","useState","LoginContext","isLogin","whoLogin","StateManager","props","setIsLogin","setWhoLogin","sessionStorage","getItem","children"],"sources":["D:/Coding Archive/Git Repo/PrivateProject/prj05/client/src/pages/stateManager.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\r\n\r\n// 전역 상태 관리를 위한 ContextAPI 사용을 위해 createContext()을 사용, 빈 Context를 생성.\r\nexport const LoginContext = createContext({\r\n    isLogin: '',\r\n    whoLogin: ''\r\n});\r\n\r\nconst StateManager = (props) => {\r\n\r\n    // 로그인 여부 값과 로그인 한 사용자 이름을 관리하기 위한 isLogin / whoLogin 변수를 useState로 관리.\r\n    const [isLogin, setIsLogin] = useState('');\r\n    const [whoLogin, setWhoLogin] = useState('');\r\n\r\n    useEffect(() => {\r\n        // 웹이 실행되면 가장 먼저 isLogin을 flase로 초기화.\r\n            setIsLogin(false);\r\n    \r\n        // sessionStorage에 Item으로 담겨진 로그인값을 검증.\r\n        // 로그인 값의 이름은 'MEMBER_ID', 이 값이 없을(null) 경우 whoLogin의 값을 '익명사용자'로 set.\r\n        if (sessionStorage.getItem('MEMBER_ID') === null) {\r\n            setWhoLogin('익명사용자');\r\n        } \r\n        else {\r\n        // 이 값이 있을 경우 useState로 제어하는 isLogin의 값을 true로 전환하고 whoLogin을 로그인 한 유저의 ID값으로 변경한다.\r\n            setIsLogin(true);\r\n            setWhoLogin(sessionStorage.getItem('MEMBER_ID'));\r\n        }\r\n    }, [])\r\n\r\n\treturn (\r\n        <LoginContext.Provider value={{ isLogin, setIsLogin, whoLogin, setWhoLogin }}>\r\n            {props.children}\r\n        </LoginContext.Provider>\r\n    )\r\n}\r\n\r\nexport default StateManager;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D,C,CAEA;;;AACA,OAAO,MAAMC,YAAY,gBAAGH,aAAa,CAAC;EACtCI,OAAO,EAAE,EAD6B;EAEtCC,QAAQ,EAAE;AAF4B,CAAD,CAAlC;;AAKP,MAAMC,YAAY,GAAIC,KAAD,IAAW;EAAA;;EAE5B;EACA,MAAM,CAACH,OAAD,EAAUI,UAAV,IAAwBN,QAAQ,CAAC,EAAD,CAAtC;EACA,MAAM,CAACG,QAAD,EAAWI,WAAX,IAA0BP,QAAQ,CAAC,EAAD,CAAxC;EAEAD,SAAS,CAAC,MAAM;IACZ;IACIO,UAAU,CAAC,KAAD,CAAV,CAFQ,CAIZ;IACA;;IACA,IAAIE,cAAc,CAACC,OAAf,CAAuB,WAAvB,MAAwC,IAA5C,EAAkD;MAC9CF,WAAW,CAAC,OAAD,CAAX;IACH,CAFD,MAGK;MACL;MACID,UAAU,CAAC,IAAD,CAAV;MACAC,WAAW,CAACC,cAAc,CAACC,OAAf,CAAuB,WAAvB,CAAD,CAAX;IACH;EACJ,CAdQ,EAcN,EAdM,CAAT;EAgBH,oBACO,QAAC,YAAD,CAAc,QAAd;IAAuB,KAAK,EAAE;MAAEP,OAAF;MAAWI,UAAX;MAAuBH,QAAvB;MAAiCI;IAAjC,CAA9B;IAAA,UACKF,KAAK,CAACK;EADX;IAAA;IAAA;IAAA;EAAA,QADP;AAKA,CA3BD;;GAAMN,Y;;KAAAA,Y;AA6BN,eAAeA,YAAf"},"metadata":{},"sourceType":"module"}